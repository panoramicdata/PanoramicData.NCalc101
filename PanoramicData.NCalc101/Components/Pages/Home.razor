@page "/"
@using PanoramicData.Blazor;
@using PanoramicData.Blazor.Models
@using PanoramicData.NCalc101.Models

<PageTitle>NCalc 101</PageTitle>
<div class="row">
	<div class="col-12 d-none d-lg-block">
		<PDToolbar>
			<PDToolbarDropdown Text=" Workspace"
							   IconCssClass="fa fa-desktop"
							   CssClass="btn btn-primary"
							   IsEnabled="true"
							   Click="@(async x => await SelectWorkspaceDropdownActionAsync(x))"
							   >
				<PDMenuItem Text="Create"
							IconCssClass="fa-solid fa-plus" />
				<PDMenuItem Text="Export"
							IconCssClass="fa-solid fa-download" />
				<PDMenuItem Text="Import"
							IconCssClass="fa-solid fa-upload" />
				<PDMenuItem IsSeparator="true" />
				<PDMenuItem Text="Delete"
							IconCssClass="fa-solid fa-trash" />
			</PDToolbarDropdown>
			<PDToolbarDropdown Text=" Variable"
							   IconCssClass="fa fa-circle-dot"
							   CssClass="btn btn-success"
							   IsEnabled="true"
							   Click="@(async x => await VariableDropdownItemSelectedAsync(x))">
				<PDMenuItem Text="String"
							IconCssClass="fa-solid fa-a" />
				<PDMenuItem Text="Integer"
							IconCssClass="fa-solid fa-1" />
				<PDMenuItem Text="Double"
							IconCssClass="fa-solid fa-temperature-half" />
				<PDMenuItem Text="Boolean"
							IconCssClass="fa-solid fa-toggle-on" />
				<PDMenuItem Text="DateTime"
							IconCssClass="fa-solid fa-clock" />
				<PDMenuItem Text="DateTimeOffset"
							IconCssClass="fa-regular fa-clock" />
				<PDMenuItem Text="Expression"
							IconCssClass="fa-solid fa-calculator" />
				<PDMenuItem IsSeparator="true" />
				<PDMenuItem Text="Delete"
							IconCssClass="fa-solid fa-trash" />
			</PDToolbarDropdown>

			<PDToolbarTextbox Value="@WorkspaceService.Workspace.Name"
							  ValueChanged="NameChangedAsync"
							  Width="100%"
							  ShiftRight="true"
							  ShowClearButton="false" />

		</PDToolbar>
	</div>
	<div class="col-12 d-block d-lg-none">
		<PDToolbar>
			<PDToolbarDropdown Text=""
							   IconCssClass="fa fa-desktop"
							   CssClass="btn btn-primary"
							   IsEnabled="true"
							   Click="@(async x => await SelectWorkspaceDropdownActionAsync(x))">
				<PDMenuItem Text="Create"
							IconCssClass="fa-solid fa-plus" />
				<PDMenuItem Text="Export"
							IconCssClass="fa-solid fa-download" />
				<PDMenuItem Text="Import"
							IconCssClass="fa-solid fa-upload" />
				<PDMenuItem IsSeparator="true" />
				<PDMenuItem Text="Delete"
							IconCssClass="fa-solid fa-trash" />
			</PDToolbarDropdown>
			<PDToolbarDropdown Text=""
							   IconCssClass="fa fa-circle-dot"
							   CssClass="btn btn-success"
							   IsEnabled="true"
							   Click="@(async x => await VariableDropdownItemSelectedAsync(x))">
				<PDMenuItem Text="String"
							IconCssClass="fa-solid fa-a" />
				<PDMenuItem Text="Integer"
							IconCssClass="fa-solid fa-1" />
				<PDMenuItem Text="Double"
							IconCssClass="fa-solid fa-temperature-half" />
				<PDMenuItem Text="Boolean"
							IconCssClass="fa-solid fa-toggle-on" />
				<PDMenuItem Text="DateTime"
							IconCssClass="fa-solid fa-clock" />
				<PDMenuItem Text="DateTimeOffset"
							IconCssClass="fa-regular fa-clock" />
				<PDMenuItem Text="Expression"
							IconCssClass="fa-solid fa-calculator" />
				<PDMenuItem IsSeparator="true" />
				<PDMenuItem Text="Delete"
							IconCssClass="fa-solid fa-trash" />
			</PDToolbarDropdown>

			<PDToolbarTextbox Value="@WorkspaceService.Workspace.Name"
							  ValueChanged="NameChangedAsync"
							  Width="100%"
							  ShiftRight="true"
							  ShowClearButton="false" />

		</PDToolbar>
	</div>
</div>

@if (_showInputFile)
{
<div class="row">
	<div class="col-12">
		<PDToolbar>
			<InputFile @ref="_inputFile" OnChange="UploadWorkspaceAsync" />
			<PDButton Text=""
					  IconCssClass="fa-solid fa-x"
					  CssClass="btn btn-danger"
					  Click="@(() => _showInputFile = false)" />
		</PDToolbar>
	</div>
</div>
}

<div class="row">
	<div class="col-lg-6 mt-3">
		<h3><i class="fa-solid fa-keyboard" /> Input</h3>
		<div class="ncalc-input">
			<PDTextArea Value="@_expression"
						Rows="10"
						CssClass="d-none d-lg-block"
						ValueChanged="OnExpressionChangedAsync" />
			<PDTextArea Value="@_expression2"
						Rows="4"
						CssClass="d-block d-lg-none"
						ValueChanged="OnExpressionChangedAsync" />
		</div>
	</div>
	<div class="col-lg-6 mt-3">
		@if (_exceptionMessage == string.Empty)
		{
			<h3><i class="fa-solid fa-check-circle" /> Output (@_resultType)</h3>
			<PDTextArea @bind-Value="_result"
						Rows="10"
						CssClass="result d-none d-lg-block"
						IsReadOnly="true" />
			<PDTextArea @bind-Value="_result"
						Rows="4"
						CssClass="result d-block d-lg-none"
						IsReadOnly="true" />
		}
		else
		{
			<h3><i class="fa-solid fa-warning" /> Error (@_exceptionType)</h3>
			<PDTextArea @bind-Value="_exceptionMessage"
						Rows="10"
						CssClass="result d-none d-lg-block"
						IsReadOnly="true" />
			<PDTextArea @bind-Value="_exceptionMessage"
						Rows="4"
						CssClass="result d-block d-lg-none"
						IsReadOnly="true" />
		}
	</div>
</div>
<div class="row mt-3">
	<div class="col-12">
		<PDTable TItem="Variable"
				 @ref = "_table"
				 DataProvider="WorkspaceService"
				 CssClass="variable-table"
				 AllowEdit="true"
				 AfterEditCommitted="VariableEditCommitedAsync"
				 DoubleClick="@(async () => await _table!.BeginEditAsync())"
				 UserSelectable="true"
				 KeyField="v => v.Id"
				 SelectionMode="TableSelectionMode.Multiple"
				 ExceptionHandler="TableExceptionHandler"
				 SelectionChanged="VariableSelectionChanged"
				 SortCriteria="_sortCriteria"
			>
			<PDColumn TItem="Variable"
					  Id="Type"
					  Title="Type">
				<Template>
					<i class="@context.GetFontAwesome()" />
					@(new MarkupString(context.Type.ToString().Replace(".", "<wbr />.")))
				</Template>
			</PDColumn>
			<PDColumn TItem="Variable"
					  Id="Id"
					  Title="Id"
					  ShowInList="false"
					  Editable="false" 
					  Field="v => v.Id" />
			<PDColumn TItem="Variable"
					  Id="Name"
					  Title="Name"
					  Editable="true"
					  Field="v => v.Name" />
			<PDColumn TItem="Variable"
					  Id="Value"
					  Title="Value"
					  Editable="true"
					  Field="v => v.Value" />
		</PDTable>
	</div>
</div>